// Prisma schema aligned to PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Couple {
  id              String   @id @default(cuid())
  partner_a_name  String
  partner_b_name  String
  anniversary_date DateTime?
  city            String   @default("Hyderabad")
  region          String   @default("north-india") // Cultural region
  language        String   @default("hindi")
  children        String   @default("[]") // JSON as String for SQLite
  premium_until   DateTime?
  encryption_key  String
  stripe_customer_id String?
  stripe_subscription_id String?
  subscription_status String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relationships
  sync_entries     SyncEntry[]
  tasks            Task[]
  ritual_sessions  RitualSession[]
  rasa_balance     RasaBalance[]
  children_profiles Child[]
  reward_transactions RewardTransaction[]
  memories         Memory[]
  meal_plans       MealPlan[]
  grocery_lists    GroceryList[]
  ai_suggestions   AISuggestion[]
  users            User[]
  conversations    Conversation[]
  voice_sessions   VoiceSession[]
  analytics       Analytics[]
  cultural_preferences CulturalPreference[]
  shared_goals     SharedGoal[]
  notifications   Notification[]

  @@map("couples")
}

model SyncEntry {
  id           String   @id @default(cuid())
  couple_id    String
  partner      String   // 'partner_a' or 'partner_b'
  mood_score   Int      // 1-5 scale
  energy_level Int      // 1-10 scale
  mood_tags    String   @default("[]") // JSON as String for SQLite
  context_notes String?
  created_at   DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("sync_entries")
}

model Task {
  id             String      @id @default(cuid())
  couple_id      String
  title          String
  description    String?
  assigned_to    String      // 'partner_a', 'partner_b', or 'both'
  status         String      @default("PENDING") // TaskStatus as String
  category       String      // TaskCategory as String
  ai_reasoning   String?     // JSON as String for SQLite
  due_at         DateTime?
  completed_at   DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model RitualSession {
  id               String        @id @default(cuid())
  couple_id        String
  ritual_type      String        // RitualType as String
  archetype        String        // Archetype as String
  duration_minutes Int
  completion_data  String?       // JSON as String for SQLite
  started_at       DateTime      @default(now())
  completed_at     DateTime?

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("ritual_sessions")
}

model RasaBalance {
  id               String   @id @default(cuid())
  couple_id        String
  play_percentage  Float
  duty_percentage  Float
  balance_percentage Float
  updated_at       DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@unique([couple_id])
  @@map("rasa_balance")
}

model Child {
  id           String   @id @default(cuid())
  couple_id    String
  name         String
  age          Int
  preferences  String   @default("[]") // JSON as String for SQLite
  created_at   DateTime @default(now())

  couple       Couple           @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  activities   FamilyActivity[]

  @@map("children")
}

// New comprehensive kids activities models
model ChildProfile {
  id              String   @id @default(cuid())
  parentId        String   // References User.id
  name            String
  birthDate       DateTime
  avatar          String?
  preferences     String   @default("{}") // JSON as String for SQLite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  progress        ChildProgress?
  achievements    ChildAchievement[]
  goals           ChildGoal[]
  completions     ActivityCompletion[]
  
  @@map("child_profiles")
}

model ChildProgress {
  id                           String   @id @default(cuid())
  childId                      String   @unique
  totalActivitiesCompleted     Int      @default(0)
  currentStreak               Int      @default(0)
  longestStreak               Int      @default(0)
  kindnessPoints              Int      @default(0)
  creativityScore             Int      @default(0)
  emotionalIntelligenceLevel  Int      @default(1)
  skillsAcquired              String   @default("[]") // JSON as String for SQLite
  learningPath                String   @default("{}") // JSON as String for SQLite
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  child ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@map("child_progress")
}

model ChildAchievement {
  id            String   @id @default(cuid())
  childId       String
  achievementId String
  name          String
  description   String
  icon          String
  rarity        String   // 'common', 'rare', 'epic', 'legendary'
  earnedAt      DateTime @default(now())
  requirements  String   @default("[]") // JSON as String for SQLite

  child ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@unique([childId, achievementId])
  @@map("child_achievements")
}

model ChildGoal {
  id          String    @id @default(cuid())
  childId     String
  title       String
  description String
  target      Int
  current     Int       @default(0)
  deadline    DateTime
  category    String    // Activity category
  priority    String    @default("medium") // 'low', 'medium', 'high'
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  child ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@map("child_goals")
}

model Activity {
  id                    String   @id @default(cuid())
  title                 String
  description           String
  type                  String   // 'emotion', 'mythology', 'creativity', etc.
  difficulty            String   // 'easy', 'medium', 'hard'
  ageMin                Int
  ageMax                Int
  estimatedDuration     Int      // in minutes
  tags                  String   @default("[]") // JSON as String for SQLite
  instructions          String   @default("[]") // JSON as String for SQLite
  materials             String   @default("[]") // JSON as String for SQLite
  learningObjectives    String   @default("[]") // JSON as String for SQLite
  parentGuidance        String?
  safetyNotes           String   @default("[]") // JSON as String for SQLite
  accessibility         String   @default("{}") // JSON as String for SQLite
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  completions ActivityCompletion[]
  
  @@map("activities")
}

model ActivityCompletion {
  id              String    @id @default(cuid())
  childId         String
  activityId      String
  startTime       DateTime
  endTime         DateTime
  completed       Boolean   @default(false)
  score           Int?
  answers         String    @default("{}") // JSON as String for SQLite
  reflection      String?
  parentFeedback  String?
  media           String    @default("[]") // JSON as String for SQLite
  completedAt     DateTime  @default(now())

  child    ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  activity Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@map("activity_completions")
}

model FamilyActivity {
  id              String        @id @default(cuid())
  child_id        String
  activity_type   String
  activity_theme  String?       // 'krishna', 'hanuman', 'saraswati', 'mythology', 'kindness', 'storybook'
  completion_data String?       // JSON as String for SQLite
  completed_at    DateTime?
  created_at      DateTime      @default(now())

  child Child @relation(fields: [child_id], references: [id], onDelete: Cascade)

  @@map("family_activities")
}

model RewardTransaction {
  id          String   @id @default(cuid())
  couple_id   String
  coins_earned Int
  coins_spent Int      @default(0)
  activity    String   // Description of activity
  created_at  DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("reward_transactions")
}

model Memory {
  id          String   @id @default(cuid())
  couple_id   String
  type        String   // 'text', 'audio', 'video', 'image'
  content     String   // URL for media, text content for text memories
  title       String
  description String?
  date        DateTime @default(now())
  tags        String   @default("[]") // JSON as String for SQLite
  sentiment   String   // 'positive', 'neutral', 'negative'
  partners    String   @default("[]") // JSON as String for SQLite
  is_private  Boolean  @default(false)
  memory_type String?  // 'kindness', 'storybook', 'general'
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("memories")
}

// Placeholder models for missing relations
model MealPlan {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("meal_plans")
}

model GroceryList {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("grocery_lists")
}

model AISuggestion {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  content   String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("ai_suggestions")
}

model User {
  id        String   @id @default(cuid())
  couple_id String
  name      String
  email     String   @unique
  password  String?  // Optional for demo purposes, but recommended in production
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  content   String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("conversations")
}

model VoiceSession {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  duration  Int
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("voice_sessions")
}

model Analytics {
  id        String   @id @default(cuid())
  couple_id String
  data      String   // JSON as String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("analytics")
}

model CulturalPreference {
  id        String   @id @default(cuid())
  couple_id String
  preference String
  value     String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("cultural_preferences")
}

model SharedGoal {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  description String?
  target_date DateTime?
  completed Boolean @default(false)
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("shared_goals")
}

model Notification {
  id        String   @id @default(cuid())
  couple_id String
  title     String
  message   String
  read      Boolean  @default(false)
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  @@map("notifications")
}

// Push subscriptions (web or expo)
model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  platform   String   // 'web' | 'expo'
  endpoint   String?
  p256dhKey  String?
  authKey    String?
  expoToken  String?
  userAgent  String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("push_subscriptions")
}
