// Production schema using PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Couple {
  id                     String    @id @default(cuid())
  partner_a_name         String
  partner_b_name         String
  anniversary_date       DateTime?
  city                   String    @default("Hyderabad")
  region                 String    @default("north-india") // Cultural region
  language               String    @default("hindi")
  children               String    @default("[]")
  premium_until          DateTime?
  stripe_customer_id     String?
  stripe_subscription_id String?
  subscription_status    String?   @default("inactive")
  encryption_key         String
  version                Int       @default(1)
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  // Relationships
  sync_entries         SyncEntry[]
  tasks                Task[]
  ritual_sessions      RitualSession[]
  rasa_balance         RasaBalance[]
  children_profiles    Child[]
  reward_transactions  RewardTransaction[]
  memories             Memory[]
  meal_plans           MealPlan[]
  grocery_lists        GroceryList[]
  ai_suggestions       AISuggestion[]
  users                User[]
  conversations        Conversation[]
  voice_sessions       VoiceSession[]
  analytics            Analytics[]
  cultural_preferences CulturalPreference[]
  shared_goals         SharedGoal[]
  notifications        Notification[]

  @@map("couples")
}

model SyncEntry {
  id            String   @id @default(cuid())
  couple_id     String
  partner       String // 'partner_a' or 'partner_b'
  mood_score    Int // 1-5 scale
  energy_level  Int // 1-10 scale
  mood_tags     String   @default("[]")
  context_notes String?
  created_at    DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("sync_entries")
}

model Task {
  id           String    @id @default(cuid())
  couple_id    String
  title        String
  description  String?
  assigned_to  String // 'partner_a', 'partner_b', or 'both'
  status       String    @default("PENDING") // TaskStatus as String
  category     String // TaskCategory as String
  ai_reasoning String?
  due_at       DateTime?
  completed_at DateTime?
  version      Int       @default(1)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model RitualSession {
  id               String    @id @default(cuid())
  couple_id        String
  ritual_type      String // RitualType as String
  archetype        String // Archetype as String
  duration_minutes Int
  completion_data  String?
  started_at       DateTime  @default(now())
  completed_at     DateTime?

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("ritual_sessions")
}

model RasaBalance {
  id                 String   @id @default(cuid())
  couple_id          String
  play_percentage    Float
  duty_percentage    Float
  balance_percentage Float
  updated_at         DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@unique([couple_id])
  @@map("rasa_balance")
}

model Child {
  id          String   @id @default(cuid())
  couple_id   String
  name        String
  age         Int
  preferences String   @default("[]")
  created_at  DateTime @default(now())

  couple     Couple           @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  activities FamilyActivity[]

  @@map("children")
}

model FamilyActivity {
  id              String    @id @default(cuid())
  child_id        String
  activity_type   String
  activity_theme  String? // 'krishna', 'hanuman', 'saraswati', 'mythology', 'kindness', 'storybook'
  completion_data String?
  completed_at    DateTime?
  created_at      DateTime  @default(now())

  child Child @relation(fields: [child_id], references: [id], onDelete: Cascade)

  @@map("family_activities")
}

model RewardTransaction {
  id           String   @id @default(cuid())
  couple_id    String
  coins_earned Int
  coins_spent  Int      @default(0)
  activity     String // Description of activity
  created_at   DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("reward_transactions")
}

model Memory {
  id          String   @id @default(cuid())
  couple_id   String
  type        String // 'text', 'audio', 'video', 'image'
  content     String // URL for media, text content for text memories
  title       String
  description String?
  date        DateTime @default(now())
  tags        String   @default("[]")
  sentiment   String
  partners    String   @default("[]")
  is_private  Boolean  @default(false)
  memory_type String? // 'kindness', 'storybook', 'general'
  version     Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("memories")
}

// Placeholder models for missing relations
model MealPlan {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("meal_plans")
}

model GroceryList {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("grocery_lists")
}

model AISuggestion {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  content    String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("ai_suggestions")
}

model User {
  id            String   @id @default(cuid())
  couple_id     String
  name          String
  email         String   @unique
  password_hash String
  role          String   @default("USER") // USER, ADMIN
  partner_role  String? // 'partner_a' or 'partner_b'
  last_login    DateTime?
  onboardedAt   DateTime?
  totp_enabled      Boolean  @default(false)
  totp_secret       String?
  totp_recovery_codes String @default("[]") // JSON as String for compatibility
  created_at        DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  push_subscriptions PushSubscription[]

  @@map("users")
}

model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String
  p256dhKey  String
  authKey    String
  userAgent  String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model Conversation {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  content    String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model VoiceSession {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  duration   Int
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("voice_sessions")
}

model Analytics {
  id         String   @id @default(cuid())
  couple_id  String
  data       String // JSON as String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model CulturalPreference {
  id                      String   @id @default(cuid())
  couple_id               String   @unique
  region                  String   @default("north-india")
  language                String   @default("hindi")
  interests               String   @default("[]") // JSON array as string
  festival_notifications  Boolean  @default(true)
  cultural_tips          Boolean  @default(true)
  regional_content       Boolean  @default(true)
  created_at             DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("cultural_preferences")
}

model SharedGoal {
  id          String    @id @default(cuid())
  couple_id   String
  title       String
  description String?
  target_date DateTime?
  completed   Boolean   @default(false)
  created_at  DateTime  @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("shared_goals")
}

model Notification {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}
