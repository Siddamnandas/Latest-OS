  is_private  Boolean  @default(false)
  memory_type String? // 'kindness', 'storybook', 'general'
  version     Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("memories")
}

// Placeholder models for missing relations
model MealPlan {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("meal_plans")
}

model GroceryList {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("grocery_lists")
}

model AISuggestion {
  id         String   @id @default(cuid())
  couple_id  String
  title      String
  content    String
  created_at DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("ai_suggestions")
}

model User {
  id            String   @id @default(cuid())
  couple_id     String
  name          String
  email         String   @unique
  password_hash String
  role          String   @default("USER") // USER, ADMIN
  totp_enabled  Boolean   @default(false)
  totp_secret   String?
  totp_recovery_codes String[] @default([])
  partner_role  String?   // 'partner_a' or 'partner_b'
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("users")
}